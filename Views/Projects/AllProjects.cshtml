@model List<Data.Entities.ProjectEntity>


@{
	ViewData["Title"] = "Projects";
}
@await Html.PartialAsync("Partials/Components/_ProjectOverview")



<div id="projects" class="page">
	<section class="project-list">
		@if (Model == null || !Model.Any())
		{
			<h6>No projects found</h6>
		} else
		@foreach (var project in Model)
		{

			<div class="card">
			<div class="card-header">
				<div class="project-menu">
					<div class="project-menu-header">
						<div class="project-image">
								<img src="@project.ImagePath" alt="Project image" />
						</div>
						<div class="project-info">
							<h6 class="project-display">@project.ProjectName</h6>
								<span class="client-display">
									@project.Client?.Name
								</span>
						</div>


						<button type="button" class="settings-project-button" data-popup="popup-1"></button>
						<div class="edit-pop-up-menu popup-1">
							<div class="pop-up-menu-links">
								<div class="pop-up-menu-section">
										<button class="dropdown-btn edit-project-btn"
												data-id="@project.Id"
												data-name="@project.ProjectName"
												data-clientid="@project.ClientId"
												data-statusid="@project.StatusId"
												data-description="@Html.Raw(project.Description ?? "")"
												data-image="@Url.Content(project.ImagePath ?? "")"
												data-startdate="@project.StartDate.ToString("yyyy-MM-dd")"
												data-enddate="@project.EndDate?.ToString("yyyy-MM-dd")"
												data-budget="@project.Budget">
											<i class="fa-solid fa-pen-to-square"></i>
											<span>Edit</span>
										</button>
								</div>
								<div class="pop-up-menu-section">
										<button class="dropdown-btn delete-project-btn" data-id="@project.Id">
										<i class="fa-solid fa-trash"></i>
										<span>Delete</span>
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="card-body">
					<p>@Html.Raw(project.Description)</p>
			</div>
			<div class="card-footer"></div>
		</div>
		}
	</section>
</div>



<script>
	document.addEventListener("DOMContentLoaded", () => {
		
		const editButtons = document.querySelectorAll('.edit-project-btn');
		const modal = document.getElementById('edit-project-modal');

		editButtons.forEach(button => {
			button.addEventListener('click', (event) => {
				event.stopPropagation();

				
				modal.classList.add('modal-show');

				
				document.getElementById('edit-project-id').value = button.dataset.id;
				document.getElementById('projectName').value = button.dataset.name;

				document.getElementById('selected-client').value = button.dataset.clientid;
				document.getElementById('edit-form-select-text').textContent = `Client ${button.dataset.clientid}`;

				document.getElementById('selected-status').value = button.dataset.statusid;
				document.getElementById('status-form-select-text').textContent =
					button.dataset.statusid === "1" ? "Started" : "Completed";

				document.getElementById('startDate').value = button.dataset.startdate;
				document.getElementById('endDate').value = button.dataset.enddate;
				document.getElementById('budget').value = button.dataset.budget;

				
				const quill = window.editProjectDescriptionQuill;
				if (quill) {
					quill.root.innerHTML = button.dataset.description || "";
				}
				document.getElementById('edit-project-description').value = button.dataset.description || "";

				
				const preview = document.getElementById('edit-image-preview-project');
				if (button.dataset.image) {
					preview.src = button.dataset.image;
					preview.classList.remove('hide');
				} else {
					preview.src = "#";
					preview.classList.add('hide');
				}
			});
		});

		
		async function deleteProject(id) {
			const confirmed = confirm("Are you sure you want to delete this project?");
			if (!confirmed) return;

			const response = await fetch(`/projects/${id}`, {
				method: "DELETE"
			});

			if (response.ok) {
				alert("Project deleted successfully");
				const card = document.querySelector(`.delete-project-btn[data-id="${id}"]`)?.closest(".card");
				if (card) card.remove();
			} else {
				alert("Failed to delete project");
			}
		}

		const deleteButtons = document.querySelectorAll('.delete-project-btn');
		deleteButtons.forEach(button => {
			button.addEventListener('click', (event) => {
				event.stopPropagation();
				const id = button.dataset.id;
				if (id) deleteProject(id);
			});
		});

		
		const settingsButtons = document.querySelectorAll('.settings-project-button');
		settingsButtons.forEach(button => {
			const popupClass = button.getAttribute('data-popup');
			const popup = document.querySelector(`.${popupClass}`);

			button.addEventListener('click', (event) => {
				event.stopPropagation();
				const isVisible = popup.style.display === 'flex';
				popup.style.display = isVisible ? 'none' : 'flex';
			});

			document.addEventListener('click', (event) => {
				if (!button.contains(event.target) && !popup.contains(event.target)) {
					popup.style.display = 'none';
				}
			});
		});

		
		const closeEditModalButton = document.getElementById('close-edit-modal-btn');
		closeEditModalButton.addEventListener('click', () => {
			modal.classList.remove('modal-show');
		});

		
		window.addEventListener('click', (event) => {
			if (event.target === modal) {
				modal.classList.remove('modal-show');
			}
		});
	});

				const html = new DOMParser().parseFromString(button.dataset.description, 'text/html').body.innerHTML;
	quill.root.innerHTML = html;
</script>
